plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
    id "com.diffplug.spotless" version "${spotless_version}"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven { url 'https://maven.aliyun.com/repository/public' } // 阿里云镜像
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    mavenCentral()
    maven { url 'https://maven.fabricmc.net/' } // Fabric 官方仓库
    maven { url "https://maven.shedaniel.me/" }          // Cloth Config 仓库
    maven { url "https://maven.terraformersmc.com/" }    // ModMenu 仓库
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

loom {
    // splitEnvironmentSourceSets() and mods block removed
}

dependencies {
    modApi "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}"
    modApi "com.terraformersmc:modmenu:${modmenu_version}"
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.13.3"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.13.3"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.13.3"
    testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
    testImplementation "org.mockito:mockito-core:5.18.0"
    testImplementation "com.google.truth:truth:1.4.4"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

test {
    useJUnitPlatform()
    reports {
        junitXml.required = true
        html.required = true
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    inputs.property "archivesName", project.archives_base_name  // 添加输入属性声明

    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}" }  // 使用延迟求值
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}


spotless {
    // 格式化 Java 文件
    java {
        target "src/**/*.java"
        googleJavaFormat("1.28.0").aosp()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }

    // 格式化 Gradle 文件
    format 'gradle', {
        target '*.gradle', 'gradle.properties'
        leadingTabsToSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }

    // 格式化 JSON 文件
    json {
        target 'src/**/*.json', '*.json'  // 合并目标路径
        simple().indentWithSpaces(2)     // 指定缩进 2 空格
    }

    // 格式化 XML 文件
    format 'xml', {
        target 'src/**/*.xml', '*.xml'
        eclipseWtp('xml').configFile('.spotless/xml.prefs')
    }
}
